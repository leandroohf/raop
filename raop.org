

* Introduction
  
  In this project data from online community Random Act of Pizza
  (RAoP) forum was analyzed. The data is a collection of post where
  reddit's users are requesting free pizza. Sentimental analyses were
  performed in the data and the findings were used to build a model to
  predict if the post written by the user will be successful. A better
  explanation with more detail can be found in the links below.


  Code based on the links below:
  http://www.runzemc.com/2014/08/random-acts-of-pizza.html
  https://rpubs.com/kuhnrl30/RAOP

  *TODOs*
  * Explain waht is RAoP
  * Discuss a little about article reference
  * Discuss what we decided to do and why

  Learn goals:

  1. Get familiar with sentimental anlaysys 
  2. Improve expertise in tune machine learning models
  3. Gain expertise with ensemble techniques
  4. Test new diagnostic tools Permutation test
  5. Get familiar with Ariflow (**TODO**)


* Data

  * mostrar a cara do dado
  * 

    We select the variable in the target data frame below for the
    exploratory analysis
    
  ================================= Importante

  * MOstra a cara do dado
    * post exemplos
    * head dataframe
  * Explain all data transformation
    * convert to decile
    * why i did not consider negative values

      Many narratives has zero score resulting in an concentration in
      the decile zero.
      
      Ex: 100 posts in 0th decile and 5 posts in 7th decile.
      
  #+BEGIN_SRC R :session :tangle raop.R :results none
    library(jsonlite, quietly = TRUE )
    library(feather, quietly = TRUE )
    library(ggplot2, quietly = TRUE )
    library(grid)
    library(gridExtra)
    library(ggthemes)

    source("./utils/data.R")
    source("./utils/utils.R")

    settings   <- fromJSON( "SETTINGS.json", flatten=TRUE)

    cat('Loading data engineer...\n')
    raop.engineer <- readRDS(settings$data_engineer_path)

    data.target <- raop.engineer$GetDataTarget()
  #+END_SRC

* Exploratory

  * Colocar link para folder com todos os graficos
  * Colocar apenas grafico diferente q fiz
    * word viz
    * histograms of the most common words
    * Exploratory  com relations diferentes
  

  Select main contribution or changes only
  
  #+BEGIN_SRC R :session :tangle exp.R
    data.view <- data.target %>%
        dplyr::group_by( requester_upvotes_minus_downvotes_at_request ) %>%
        dplyr::summarise(  success_rate = sum( requester_received_pizza )/ n(),
                         account_age = mean(requester_account_age_in_days_at_request))

    names(data.view)[1] <- c("karma")
    p.karma <- ggplot(data.view, aes(x=karma,y=success_rate)) + geom_line()

    ## =================================
    ## account age
    p.account.age <- ggplot(data.view, aes(x=account_age,y=success_rate)) + geom_line()

    ## =================================
    ## community age
    data.view <- data.target %>%
        dplyr::group_by( community_age ) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("community_age")
    p.community.age <- ggplot(data.view, aes(x=community_age,y=success_rate)) + geom_line()

    grid.arrange(p.karma, p.account.age, p.community.age, ncol = 3)

  #+END_SRC
  
  *Um pto que fiz diferente* Entao eu devo colocar separado.
  
  #+BEGIN_SRC R :session :tangle exp.R
    ## =================================
    ## post sent
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( post.sent) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("post_sent")
    p <- ggplot(data.view, aes(x=post_sent,y=success_rate)) + geom_line()
    p

    ## =================================
    ## narrative score
    cols.narratives <- c("desire.score",
                         "family.score",
                         "job.score",
                         "money.score",
                         "student.score")

    data.view0 <- data.target %>%
        dplyr::select( dplyr::one_of( c(cols.narratives,
                                        "requester_received_pizza")))

    data.view <- data.frame(decile=integer(),
                            success_rate=double(),
                            narrative=character())

    for ( narrative in cols.narratives){
    
        narrative.view <- data.view0 %>%
            na.omit() %>%
            dplyr::group_by_( narrative ) %>%
            dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())  %>%
            dplyr::mutate(narrative)
    
        names(narrative.view)[1] <- "decile" 
    
        data.view <- rbind(data.view, narrative.view)
    }

    p <- ggplot(data.view, aes(x = decile, y = success_rate, colour = narrative, group = narrative)) +
        geom_line() + ggtitle('Success rate vs. narrative') +
        scale_x_continuous(breaks = seq(0, 10, 1), name = 'Narrative declie') +
        scale_y_continuous(name = 'Success rate')

    p

  #+END_SRC

  #+BEGIN_SRC R :session :tangle exp.R
    ## =================================
    ## first half of the month 
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( first.half.of.month ) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("first_half")
    p <- ggplot(data.view, aes(x=first_half,y=success_rate)) + geom_bar(stat = 'identity')

    summary(aov(  requester_received_pizza ~ first.half.of.month, data.target ))

    ## =================================
    ## is weekend
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( is.weekend ) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("is_weekend")
    p <- ggplot(data.view, aes(x=is_weekend,y=success_rate)) + geom_bar(stat = 'identity')

    ## =================================
    ## month
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( lubridate::month(request.date)) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("month")
    p <- ggplot(data.view, aes(x=month,y=success_rate)) + geom_bar(stat = 'identity')

    ## =================================
    ## month day
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( lubridate::mday(request.date)) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("month_day")
    p <- ggplot(data.view, aes(x=month_day,y=success_rate)) + geom_bar(stat = 'identity')

    ## =================================
    ## week day
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( lubridate::wday(request.date)) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("week_day")
    p <- ggplot(data.view, aes(x=week_day,y=success_rate)) + geom_bar(stat = 'identity')
    print(p)

    ## =================================
    ## has posted before
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( posted.raop.before) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("posted_before")
    p <- ggplot(data.view, aes(x=posted_before,y=success_rate)) + geom_bar(stat = 'identity') 
    print(p)

    summary(aov(requester_received_pizza ~ posted.raop.before , data.target)) 

    ## =================================
    ## has link
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( has.link) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("has_link")
    p <- ggplot(data.view, aes(x=has_link,y=success_rate)) + geom_bar(stat = 'identity') 
    print(p)

    summary(aov(requester_received_pizza ~ has.link , data.target)) 

    ## =================================
    ## gratitude
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( gratitude) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("gratitude")
    p <- ggplot(data.view, aes(x=gratitude,y=success_rate)) + geom_bar(stat = 'identity') 
    print(p)

    summary(aov(requester_received_pizza ~ gratitude , data.target)) 

    ## =================================
    ## reciprocity
    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( reciprocity) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("reciprocity")
    p <- ggplot(data.view, aes(x=reciprocity,y=success_rate)) + geom_bar(stat = 'identity') 
    print(p)

    summary(aov(requester_received_pizza ~ reciprocity , data.target)) 

    ## =================================
    ## nword

    p <- ggplot(data.target, aes(x=requester_received_pizza,y=nword)) +
        geom_boxplot()
    print(p)

    p <- ggplot(data.target, aes(x=nword,)) +
        geom_histogram(binwidth = 1) + facet_grid(requester_received_pizza ~ . )
    print(p)

    summary(aov(requester_received_pizza ~ reciprocity , data.target)) 

    data.view <- data.target %>%
        na.omit() %>%
        dplyr::group_by( nword) %>%
        dplyr::summarise( success_rate = sum( requester_received_pizza )/ n())

    names(data.view)[1] <- c("nword")
    p <- ggplot(data.view, aes(x=nword,y=success_rate)) + geom_line()
    print(p)    
  #+END_SRC

* Model

  * procedimento determinar model vs data size
  * Explicar quais modelos tunei e como talvez colocar um exmplo ou grafico
  * ensemble
  * model comparision
  * performance na base de teste
  * explicacao do permutation test e link 
    
* Conclusion

  
